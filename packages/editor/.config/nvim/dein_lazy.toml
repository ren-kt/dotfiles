[[plugins]]# Language Server Protocolを扱う 補完
repo = 'neoclide/coc.nvim'
rev = 'release'
on_i = 1
merged = '0'
hook_add = '''
nmap <silent> cd <Plug>(coc-definition)
nmap <silent> cy <Plug>(coc-type-definition)
nmap <silent> ci <Plug>(coc-implementation)
nmap <silent> cr <Plug>(coc-references)
nnoremap <silent> K :call <SID>show_documentation()<CR>

function! s:show_documentation()
  if (index(['vim','help'], &filetype) >= 0)
    execute 'h '.expand('<cword>')
  else
    call CocAction('doHover')
  endif
endfunction

let g:coc_global_extensions = [
      \ 'coc-yaml',
      \ 'coc-python',
      \ 'coc-vetur',
      \ 'coc-solargraph',
      \ 'coc-json',
      \ 'coc-css',
      \ 'coc-tsserver',
      \ 'coc-tslint',
      \ 'coc-ultisnips'
      \]
'''

# [[plugins]]# 自動補完
# repo = 'Shougo/deoplete.nvim'
# on_i = 1
# hook_add = '''
# let g:deoplete#enable_at_startup = 1
# inoremap <expr><TAB>  pumvisible() ? "\<Down>" : "\<TAB>"
# inoremap <expr><S-TAB>  pumvisible() ? "\<Up>" : "\<S-TAB>"
# '''

# [[plugins]]# スニペット管理プラグイン
# repo = 'Shougo/neosnippet.vim'
# depends = [ 'neosnippet-snippets', 'context_filetype.vim' ]
# on_ft = 'snippet'
# on_i = 1
# hook_add = '''
# imap <C-k>     <Plug>(neosnippet_expand_or_jump)
# smap <C-k>     <Plug>(neosnippet_expand_or_jump)
# xmap <C-k>     <Plug>(neosnippet_expand_target)
# if has('conceal')
#   set conceallevel=2 concealcursor=niv
# endif
# let g:neosnippet#snippets_directory = [
#       \'~/.config/nvim/snippets'
#       \]
# '''

# [[plugins]]# neosinippetのデフォルトスニペット定義ファイル
# # repo = 'Shougo/neosnippet-snippets'

# [[plugins]] # カーソル位置のコンテキストのftを判定するライブラリ
# repo = 'Shougo/context_filetype.vim'

[[plugins]]# go
repo = 'fatih/vim-go'
on_ft = ['go']
hook_add = '''
let g:go_def_mapping_enabled = 0
let g:go_fmt_autosave = 1
let g:go_highlight_types = 1
let g:go_highlight_fields = 1
let g:go_highlight_functions = 1
let g:go_highlight_methods = 1

augroup key_map
  autocmd!
  autocmd FileType go nmap <Leader>gb <Plug>(go-build)
  autocmd FileType go nmap <Leader>gr <Plug>(go-run)
  autocmd FileType go nmap <Leader>gt <Plug>(go-test)
  autocmd FileType go nmap <Leader>gtf <Plug>(go-test-func)
  autocmd FileType go nmap <Leader>gc <Plug>(go-coverage-toggle)
  autocmd FileType go nmap <Leader>gi <Plug>(go-info)
augroup END
'''

[[plugins]]# rails
repo = 'tpope/vim-rails'
on_ft = ['ruby']

[[plugins]]# syntax
repo = 'pangloss/vim-javascript'
on_ft = ['javascript', 'vue']

[[plugins]]# syntax
repo = 'posva/vim-vue'
on_ft = ['vue']